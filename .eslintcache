[{"D:\\real-estate\\src\\index.js":"1","D:\\real-estate\\src\\App.js":"2","D:\\real-estate\\src\\reportWebVitals.js":"3","D:\\real-estate\\src\\components\\header\\Header.js":"4","D:\\real-estate\\src\\components\\search\\Search.js":"5","D:\\real-estate\\src\\components\\propertyType\\propertyType.js":"6","D:\\real-estate\\src\\components\\priceRange\\PriceRange.js":"7","D:\\real-estate\\src\\components\\results\\Results.js":"8","D:\\real-estate\\src\\components\\resultItem\\resultItem.js":"9","D:\\real-estate\\src\\components\\resultItem\\ResultItem.js":"10","D:\\real-estate\\src\\components\\propertyType\\PropertyType.js":"11","D:\\real-estate\\src\\contexts\\AppContext.js":"12","D:\\real-estate\\src\\dummyData.js":"13","D:\\real-estate\\src\\components\\propertyView\\PropertyView.js":"14"},{"size":500,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":2468,"mtime":1609074640000,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":208,"mtime":1608728976000,"results":"19","hashOfConfig":"16"},{"size":323,"mtime":1608987770000,"results":"20","hashOfConfig":"16"},{"size":188,"mtime":1608727608000,"results":"21","hashOfConfig":"16"},{"size":3850,"mtime":1608992306000,"results":"22","hashOfConfig":"16"},{"size":768,"mtime":1609028614000,"results":"23","hashOfConfig":"16"},{"size":0,"mtime":1608726788000,"results":"24","hashOfConfig":"16"},{"size":1683,"mtime":1609032746000,"results":"25","hashOfConfig":"16"},{"size":1073,"mtime":1608903076000,"results":"26","hashOfConfig":"16"},{"size":102,"mtime":1608731236000,"results":"27","hashOfConfig":"16"},{"size":12720,"mtime":1609079000000,"results":"28","hashOfConfig":"16"},{"size":2857,"mtime":1609479102000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"bov9w4",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},"D:\\real-estate\\src\\index.js",[],["63","64"],"D:\\real-estate\\src\\App.js",["65","66"],"import { useState, useEffect } from \"react\"\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\nimport AppContext from \"./contexts/AppContext\"\nimport \"./App.css\"\n\nimport Header from \"./components/header/Header\"\nimport Search from \"./components/search/Search\"\nimport PropertyType from \"./components/propertyType/PropertyType\"\nimport PriceRange from \"./components/priceRange/PriceRange\"\nimport Results from \"./components/results/Results\"\nimport PropertyView from \"./components/propertyView/PropertyView\"\n\nimport { properties } from \"./dummyData\"\n\nfunction App() {\n  const [settings, setSettings] = useState({\n    propSearchType: \"Apartments\",\n    lovedListings: {\n      //This is a hashtable so that we don't have to loop through a list for every apartment to show that you've loved it. The Key is the associated listing id.\n    },\n    priceRange: {\n      //Settings updates approprately based on listings\n      min: 846, //Lowest price in listings\n      max: 2392, //Highest price in listings\n      leftVal: 954, //Left slider handle value\n      rightVal: 1800, //Right slider handle value\n      amtOfBars: 28, //How many bars to display in the chart\n    },\n  })\n\n  const [listings, setListings] = useState([...properties])\n\n  const [priceBars, setPriceBars] = useState([])\n\n  useEffect(() => {\n    //// --Finding minimum and maximum prices in all listings and updating state\n\n    let minPrice = Infinity\n    let maxPrice = -Infinity\n\n    for (let i = 0; i < listings.length; i++) {\n      let lp = listings[i].price\n      if (minPrice > lp) minPrice = lp\n      if (maxPrice < lp) maxPrice = lp\n    }\n\n    const newSettings = {\n      ...settings,\n    }\n\n    newSettings.priceRange.min = minPrice\n    newSettings.priceRange.max = maxPrice\n\n    setSettings({ ...newSettings })\n  }, [listings])\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <AppContext.Provider\n          value={{\n            settings,\n            setSettings,\n            listings,\n            setListings,\n            priceBars,\n            setPriceBars,\n          }}\n        >\n          <Route exact path=\"/\">\n            <div id=\"upper\">\n              <Header />\n              <Search />\n              <PropertyType />\n              <PriceRange />\n            </div>\n            <Results />\n          </Route>\n\n          <Route path=\"/property/:id\" component={PropertyView} />\n        </AppContext.Provider>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App\n","D:\\real-estate\\src\\reportWebVitals.js",[],"D:\\real-estate\\src\\components\\header\\Header.js",[],"D:\\real-estate\\src\\components\\search\\Search.js",[],"D:\\real-estate\\src\\components\\propertyType\\propertyType.js",[],"D:\\real-estate\\src\\components\\priceRange\\PriceRange.js",["67"],"import React, { useContext, useEffect } from \"react\"\r\nimport AppContext from \"../../contexts/AppContext\"\r\nimport Slider from \"rc-slider\"\r\nimport \"rc-slider/assets/index.css\"\r\nimport \"./PriceRange.css\"\r\n\r\nconst PriceRange = () => {\r\n  const {\r\n    settings,\r\n    setSettings,\r\n    listings,\r\n    priceBars,\r\n    setPriceBars,\r\n  } = useContext(AppContext)\r\n\r\n  const { min, max, leftVal, rightVal } = settings.priceRange\r\n\r\n  useEffect(() => {\r\n    //// --Assigning appropriate height to each bar in the chart\r\n\r\n    let newPriceBars = new Array(settings.priceRange.amtOfBars).fill([1]).flat()\r\n\r\n    const barPercent = 1 / (settings.priceRange.amtOfBars - 1) //The percent of the data each bar will represent. Minus 1 because of index starting at 0. Dividing into 1 to get percent as a decimal.\r\n\r\n    for (let i = 0; i < listings.length; i++) {\r\n      // Finding the percent of the way this price is between the min price and max price. In English, we're finding out which bar in the distribution chart that this listing should add to.\r\n      const valPercent =\r\n        (listings[i].price - settings.priceRange.min) /\r\n        (settings.priceRange.max - settings.priceRange.min)\r\n\r\n      //Translating the percent above to the bar index\r\n      const barIndex = Math.ceil(valPercent / barPercent)\r\n\r\n      console.log(`barIndex: ${barIndex}`)\r\n\r\n      //Adding 1 to the correct bar\r\n      newPriceBars[barIndex]++\r\n    }\r\n\r\n    setPriceBars([...newPriceBars])\r\n  }, [listings])\r\n\r\n  const handleChanges = (value) => {\r\n    const newSettings = {\r\n      ...settings,\r\n      priceRange: {\r\n        ...settings.priceRange,\r\n        leftVal: value[0],\r\n        rightVal: value[1],\r\n      },\r\n    }\r\n\r\n    setSettings({ ...newSettings })\r\n  }\r\n\r\n  //// --Getting the largest value in priceBars to adjust the height of the bar's styling in JSX below\r\n\r\n  let highestBarVal = -Infinity\r\n\r\n  for (let i = 0; i < priceBars.length; i++) {\r\n    if (priceBars[i] > highestBarVal) highestBarVal = priceBars[i]\r\n  }\r\n\r\n  // --Finding what bar each slider handle is on to update the bar colors appropriately\r\n\r\n  const barPercent = 1 / (settings.priceRange.amtOfBars - 1)\r\n\r\n  const minValue = leftVal\r\n\r\n  const maxValue = rightVal\r\n\r\n  const minPercent =\r\n    (minValue - settings.priceRange.min) /\r\n    (settings.priceRange.max - settings.priceRange.min)\r\n\r\n  const maxPercent =\r\n    (maxValue - settings.priceRange.min) /\r\n    (settings.priceRange.max - settings.priceRange.min)\r\n\r\n  const minIndex = Math.ceil(minPercent / barPercent)\r\n\r\n  const maxIndex = Math.floor(maxPercent / barPercent)\r\n\r\n  //Range\r\n\r\n  const Range = Slider.Range\r\n\r\n  //JSX\r\n\r\n  return (\r\n    <div id=\"price-range-container\">\r\n      <h4>Price range</h4>\r\n      <div id=\"priceBars\">\r\n        {priceBars.map((val, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"bar\"\r\n            style={{\r\n              height: `${(val / highestBarVal) * 100}%`,\r\n              backgroundColor: `${\r\n                index >= minIndex && index <= maxIndex ? \"#287EFF\" : \"#96dbfa\"\r\n              }`,\r\n            }}\r\n            value={val}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n      <Range\r\n        allowCross={false}\r\n        min={min}\r\n        max={max}\r\n        defaultValue={[leftVal, rightVal]}\r\n        handleStyle={[\r\n          {\r\n            backgroundColor: \"#287EFF\",\r\n          },\r\n          {\r\n            backgroundColor: \"#287EFF\",\r\n          },\r\n        ]}\r\n        railStyle={{\r\n          backgroundColor: \"#287EFF\",\r\n        }}\r\n        trackStyle={[\r\n          {\r\n            backgroundColor: \"#287EFF\",\r\n          },\r\n        ]}\r\n        onChange={(value) => handleChanges(value)}\r\n      />\r\n      <div id=\"range-labels\">\r\n        <label>{`$${min.toLocaleString()}`}</label>\r\n        <label>{`$${max.toLocaleString()}`}</label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PriceRange\r\n","D:\\real-estate\\src\\components\\results\\Results.js",[],"D:\\real-estate\\src\\components\\resultItem\\resultItem.js",[],["68","69"],"D:\\real-estate\\src\\components\\resultItem\\ResultItem.js",[],"D:\\real-estate\\src\\components\\propertyType\\PropertyType.js",[],"D:\\real-estate\\src\\contexts\\AppContext.js",[],"D:\\real-estate\\src\\dummyData.js",[],"D:\\real-estate\\src\\components\\propertyView\\PropertyView.js",["70","71","72","73","74","75","76","77","78"],"import React from \"react\"\r\nimport { propDetails } from \"../../dummyData\"\r\nimport locSVG from \"../../assets/location.svg\"\r\nimport bed from \"../../assets/bed.svg\"\r\nimport bath from \"../../assets/bath.svg\"\r\nimport paw from \"../../assets/paw.svg\"\r\nimport phone from \"../../assets/phone.svg\"\r\nimport message from \"../../assets/message.svg\"\r\nimport star from \"../../assets/star.svg\"\r\nimport leftArrow from \"../../assets/left-arrow.svg\"\r\nimport \"./PropertyView.css\"\r\n\r\nconst PropertyView = ({ match }) => {\r\n  const prop = propDetails[`${match.params.id}`]\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"upperPhoto\" style={{ backgroundImage: `url(${prop.image})` }}>\r\n        <button id='backBtn'>\r\n          <img src={leftArrow} />\r\n        </button>\r\n      </div>\r\n      <div id=\"info\">\r\n        <div id=\"listingDetails\">\r\n          <div id=\"upperDetails\">\r\n            <div id=\"addrPrice\">\r\n              <h3>{prop.address}</h3>\r\n              <h1>{`$${prop.price.toLocaleString()}`}</h1>\r\n            </div>\r\n\r\n            <div id=\"cityState\">\r\n              <img src={locSVG} />\r\n              <span>{`${prop.city}, ${prop.state}`}</span>\r\n            </div>\r\n            <p id=\"type\">Apartment</p>\r\n          </div>\r\n          <div id=\"roomsPets\">\r\n            <div className=\"infoItem\">\r\n              <img src={bed} />\r\n              <span>\r\n                {prop.beds} {prop.beds === 1 ? \"bed\" : \"beds\"}\r\n              </span>\r\n            </div>\r\n            <div className=\"infoItem\">\r\n              <img id=\"bathSVG\" src={bath} />\r\n              <span>\r\n                {prop.bathrooms}{\" \"}\r\n                {prop.bathrooms === 1 ? \"bathroom\" : \"bathrooms\"}\r\n              </span>\r\n            </div>\r\n            <div className=\"infoItem\">\r\n              <img id=\"pawSVG\" src={paw} />\r\n              <span>\r\n                {prop.pets === true ? \"pets allowed\" : \"pets not allowed\"}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div id=\"descriptionContainer\">\r\n            <h4>Description</h4>\r\n            <p>\r\n              The cozy interior will comfort you here in Alaska through every\r\n              season.\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div id=\"contact\">\r\n          <div id=\"contactLeft\">\r\n            <img id=\"contactPhoto\" src={prop.contact.image} />\r\n            <div>\r\n              <p>{prop.contact.name}</p>\r\n              <div>\r\n                <img id=\"star\" src={star} />\r\n                <span>{prop.contact.rating}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div id=\"contactBtns\">\r\n            <button>\r\n              <img src={phone} />\r\n            </button>\r\n            <button>\r\n              <img src={message} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PropertyView\r\n",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":2,"column":32,"nodeType":"85","messageId":"86","endLine":2,"endColumn":38},{"ruleId":"87","severity":1,"message":"88","line":55,"column":6,"nodeType":"89","endLine":55,"endColumn":16,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"91","line":41,"column":6,"nodeType":"89","endLine":41,"endColumn":16,"suggestions":"92"},{"ruleId":"79","replacedBy":"93"},{"ruleId":"81","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":20,"column":11,"nodeType":"97","endLine":20,"endColumn":34},{"ruleId":"95","severity":1,"message":"96","line":32,"column":15,"nodeType":"97","endLine":32,"endColumn":35},{"ruleId":"95","severity":1,"message":"96","line":39,"column":15,"nodeType":"97","endLine":39,"endColumn":32},{"ruleId":"95","severity":1,"message":"96","line":45,"column":15,"nodeType":"97","endLine":45,"endColumn":46},{"ruleId":"95","severity":1,"message":"96","line":52,"column":15,"nodeType":"97","endLine":52,"endColumn":44},{"ruleId":"95","severity":1,"message":"96","line":69,"column":13,"nodeType":"97","endLine":69,"endColumn":63},{"ruleId":"95","severity":1,"message":"96","line":73,"column":17,"nodeType":"97","endLine":73,"endColumn":45},{"ruleId":"95","severity":1,"message":"96","line":80,"column":15,"nodeType":"97","endLine":80,"endColumn":34},{"ruleId":"95","severity":1,"message":"96","line":83,"column":15,"nodeType":"97","endLine":83,"endColumn":36},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'settings'. Either include it or remove the dependency array.","ArrayExpression",["100"],"React Hook useEffect has missing dependencies: 'setPriceBars', 'settings.priceRange.amtOfBars', 'settings.priceRange.max', and 'settings.priceRange.min'. Either include them or remove the dependency array.",["101"],["98"],["99"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [listings, settings]",{"range":"106","text":"107"},"Update the dependencies array to be: [listings, setPriceBars, settings.priceRange.amtOfBars, settings.priceRange.max, settings.priceRange.min]",{"range":"108","text":"109"},[1790,1800],"[listings, settings]",[1467,1477],"[listings, setPriceBars, settings.priceRange.amtOfBars, settings.priceRange.max, settings.priceRange.min]"]