[{"D:\\real-estate\\src\\index.js":"1","D:\\real-estate\\src\\App.js":"2","D:\\real-estate\\src\\reportWebVitals.js":"3","D:\\real-estate\\src\\components\\header\\Header.js":"4","D:\\real-estate\\src\\components\\search\\Search.js":"5","D:\\real-estate\\src\\components\\propertyType\\propertyType.js":"6","D:\\real-estate\\src\\components\\priceRange\\PriceRange.js":"7","D:\\real-estate\\src\\components\\results\\Results.js":"8","D:\\real-estate\\src\\components\\resultItem\\resultItem.js":"9","D:\\real-estate\\src\\components\\resultItem\\ResultItem.js":"10","D:\\real-estate\\src\\components\\propertyType\\PropertyType.js":"11","D:\\real-estate\\src\\contexts\\AppContext.js":"12","D:\\real-estate\\src\\dummyData.js":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":1922,"mtime":1608901624000,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":208,"mtime":1608728976000,"results":"18","hashOfConfig":"15"},{"size":300,"mtime":1608729318000,"results":"19","hashOfConfig":"15"},{"size":188,"mtime":1608727608000,"results":"20","hashOfConfig":"15"},{"size":3896,"mtime":1608872212000,"results":"21","hashOfConfig":"15"},{"size":609,"mtime":1608739512000,"results":"22","hashOfConfig":"15"},{"size":0,"mtime":1608726788000,"results":"23","hashOfConfig":"15"},{"size":423,"mtime":1608739782000,"results":"24","hashOfConfig":"15"},{"size":1055,"mtime":1608902656000,"results":"25","hashOfConfig":"15"},{"size":102,"mtime":1608731236000,"results":"26","hashOfConfig":"15"},{"size":2988,"mtime":1608825462000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"bov9w4",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"D:\\real-estate\\src\\index.js",[],["60","61"],"D:\\real-estate\\src\\App.js",["62"],"import { useState, useEffect } from \"react\"\nimport AppContext from \"./contexts/AppContext\"\nimport \"./App.css\"\n\nimport Header from \"./components/header/Header\"\nimport Search from \"./components/search/Search\"\nimport PropertyType from \"./components/propertyType/PropertyType\"\nimport PriceRange from \"./components/priceRange/PriceRange\"\nimport Results from \"./components/results/Results\"\n\nimport dummyData from \"./dummyData\"\n\nfunction App() {\n  const [settings, setSettings] = useState({\n    propSearchType: 'apt',\n    priceRange: {\n      //Settings updates approprately based on listings\n      min: 846, //Lowest price in listings\n      max: 2392, //Highest price in listings\n      leftVal: 954, //Left slider handle value\n      rightVal: 1800, //Right slider handle value\n      amtOfBars: 28, //How many bars to display in the chart\n    },\n  })\n\n  const [listings, setListings] = useState([...dummyData])\n\n  const [priceBars, setPriceBars] = useState([])\n\n  useEffect(() => {\n    //// --Finding minimum and maximum prices in all listings and updating state\n\n    let minPrice = Infinity\n    let maxPrice = -Infinity\n\n    for (let i = 0; i < listings.length; i++) {\n      let lp = listings[i].price\n      if (minPrice > lp) minPrice = lp\n      if (maxPrice < lp) maxPrice = lp\n    }\n\n    const newSettings = {\n      ...settings,\n    }\n\n    newSettings.priceRange.min = minPrice\n    newSettings.priceRange.max = maxPrice\n\n    setSettings({ ...newSettings })\n  }, [listings])\n\n  return (\n    <div className=\"App\">\n      <AppContext.Provider\n        value={{\n          settings,\n          setSettings,\n          listings,\n          setListings,\n          priceBars,\n          setPriceBars,\n        }}\n      >\n        <div id=\"upper\">\n          <Header />\n          <Search />\n          <PropertyType />\n          <PriceRange />\n        </div>\n        <Results />\n      </AppContext.Provider>\n    </div>\n  )\n}\n\nexport default App\n","D:\\real-estate\\src\\reportWebVitals.js",[],"D:\\real-estate\\src\\components\\header\\Header.js",[],"D:\\real-estate\\src\\components\\search\\Search.js",["63"],"import React from \"react\"\r\nimport mg from '../../assets/mg-edit.png'\r\nimport \"./Search.css\"\r\n\r\nconst Search = () => {\r\n  return (\r\n    <div>\r\n      <h4>Location</h4>\r\n      <div id=\"search-bar\">\r\n        <img src={mg} />\r\n        <input />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","D:\\real-estate\\src\\components\\propertyType\\propertyType.js",[],"D:\\real-estate\\src\\components\\priceRange\\PriceRange.js",["64"],"import React, { useContext, useEffect } from \"react\"\r\nimport AppContext from \"../../contexts/AppContext\"\r\nimport Slider from \"rc-slider\"\r\nimport \"rc-slider/assets/index.css\"\r\nimport \"./PriceRange.css\"\r\n\r\nconst PriceRange = () => {\r\n  const {\r\n    settings,\r\n    setSettings,\r\n    listings,\r\n    priceBars,\r\n    setPriceBars,\r\n  } = useContext(AppContext)\r\n\r\n  const { min, max, leftVal, rightVal } = settings.priceRange\r\n\r\n  useEffect(() => {\r\n    //// --Assigning appropriate height to each bar in the chart\r\n\r\n    let newPriceBars = new Array(settings.priceRange.amtOfBars).fill([1]).flat()\r\n\r\n    const barPercent = 1 / (settings.priceRange.amtOfBars - 1) //The percent of the data each bar will represent. Minus 1 because of index starting at 0. Dividing into 1 to get percent as a decimal.\r\n\r\n    for (let i = 0; i < listings.length; i++) {\r\n      // Finding the percent of the way this price is between the min price and max price. In English, we're finding out which bar in the distribution chart that this listing should add to.\r\n      const valPercent =\r\n        (listings[i].price - settings.priceRange.min) /\r\n        (settings.priceRange.max - settings.priceRange.min)\r\n\r\n      //Translating the percent above to the bar index\r\n      const barIndex = Math.ceil(valPercent / barPercent)\r\n\r\n      console.log(`barIndex: ${barIndex}`)\r\n\r\n      //Adding 1 to the correct bar\r\n      newPriceBars[barIndex]++\r\n    }\r\n\r\n    setPriceBars([...newPriceBars])\r\n  }, [listings])\r\n\r\n  const handleChanges = (value) => {\r\n    const newSettings = {\r\n      ...settings,\r\n      priceRange: {\r\n        ...settings.priceRange,\r\n        leftVal: value[0],\r\n        rightVal: value[1],\r\n      },\r\n    }\r\n\r\n    setSettings({ ...newSettings })\r\n  }\r\n\r\n  //// --Getting the largest value in priceBars to adjust the height of the bar's styling in JSX below\r\n\r\n  let highestBarVal = -Infinity\r\n\r\n  for (let i = 0; i < priceBars.length; i++) {\r\n    if (priceBars[i] > highestBarVal) highestBarVal = priceBars[i]\r\n  }\r\n\r\n  // --Finding what bar each slider handle is on to update the bar colors appropriately\r\n\r\n  const barPercent = 1 / (settings.priceRange.amtOfBars - 1)\r\n\r\n  const minValue = leftVal\r\n\r\n  const maxValue = rightVal\r\n\r\n  const minPercent =\r\n    (minValue - settings.priceRange.min) /\r\n    (settings.priceRange.max - settings.priceRange.min)\r\n\r\n  const maxPercent =\r\n    (maxValue - settings.priceRange.min) /\r\n    (settings.priceRange.max - settings.priceRange.min)\r\n\r\n  const minIndex = Math.ceil(minPercent / barPercent)\r\n\r\n  const maxIndex = Math.floor(maxPercent / barPercent)\r\n\r\n  //Range\r\n\r\n  const Range = Slider.Range\r\n\r\n  //JSX\r\n\r\n  return (\r\n    <div id=\"price-range-container\">\r\n      <h4>Price range</h4>\r\n      <div id=\"priceBars\">\r\n        {priceBars.map((val, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"bar\"\r\n            style={{\r\n              height: `${(val / highestBarVal) * 100}%`,\r\n              backgroundColor: `${\r\n                index >= minIndex && index <= maxIndex ? \"#287EFF\" : \"#96dbfa\"\r\n              }`,\r\n            }}\r\n            value={val}\r\n          ></div>\r\n        ))}\r\n      </div>\r\n      <Range\r\n        allowCross={false}\r\n        min={min}\r\n        max={max}\r\n        defaultValue={[leftVal, rightVal]}\r\n        handleStyle={[\r\n          {\r\n            backgroundColor: \"#287EFF\",\r\n          },\r\n          {\r\n            backgroundColor: \"#287EFF\",\r\n          },\r\n        ]}\r\n        railStyle={{\r\n          backgroundColor: \"#287EFF\",\r\n        }}\r\n        trackStyle={[\r\n          {\r\n            backgroundColor: \"#287EFF\",\r\n          },\r\n        ]}\r\n        onChange={(value) => handleChanges(value)}\r\n      />\r\n      <div id=\"range-labels\">\r\n        <label>{`$${min.toLocaleString()}`}</label>\r\n        <label>{`$${max.toLocaleString()}`}</label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PriceRange\r\n","D:\\real-estate\\src\\components\\results\\Results.js",[],"D:\\real-estate\\src\\components\\resultItem\\resultItem.js",[],["65","66"],"D:\\real-estate\\src\\components\\resultItem\\ResultItem.js",["67"],"import React from \"react\"\r\nimport './ResultItem.css'\r\n\r\nconst resultItem = ({ image, price, address, sqFeet }) => {\r\n\r\n  return (\r\n    <div id=\"result-item\">\r\n      <img src={image} />\r\n      <div id=\"details\">\r\n        <h4 id=\"price\">${price.toLocaleString()}</h4>\r\n        <p id=\"address\">{address}</p>\r\n        <p>{sqFeet.toLocaleString()} Square Feet</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default resultItem\r\n","D:\\real-estate\\src\\components\\propertyType\\PropertyType.js",[],"D:\\real-estate\\src\\contexts\\AppContext.js",[],"D:\\real-estate\\src\\dummyData.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":50,"column":6,"nodeType":"74","endLine":50,"endColumn":16,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":10,"column":9,"nodeType":"78","endLine":10,"endColumn":25},{"ruleId":"72","severity":1,"message":"79","line":41,"column":6,"nodeType":"74","endLine":41,"endColumn":16,"suggestions":"80"},{"ruleId":"68","replacedBy":"81"},{"ruleId":"70","replacedBy":"82"},{"ruleId":"76","severity":1,"message":"77","line":8,"column":7,"nodeType":"78","endLine":8,"endColumn":26},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'settings'. Either include it or remove the dependency array.","ArrayExpression",["85"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'setPriceBars', 'settings.priceRange.amtOfBars', 'settings.priceRange.max', and 'settings.priceRange.min'. Either include them or remove the dependency array.",["86"],["83"],["84"],"no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},{"desc":"89","fix":"90"},"Update the dependencies array to be: [listings, settings]",{"range":"91","text":"92"},"Update the dependencies array to be: [listings, setPriceBars, settings.priceRange.amtOfBars, settings.priceRange.max, settings.priceRange.min]",{"range":"93","text":"94"},[1458,1468],"[listings, settings]",[1467,1477],"[listings, setPriceBars, settings.priceRange.amtOfBars, settings.priceRange.max, settings.priceRange.min]"]